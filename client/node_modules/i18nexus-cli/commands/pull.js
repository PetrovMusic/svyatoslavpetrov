const fs = require('fs');
const colors = require('colors');
const handleError = require('../handleError');
const handleFetch = require('../handleFetch');
const baseUrl = require('../baseUrl');

const cleanDirectory = path => {
  if (!fs.existsSync(path)) {
    return;
  }

  // as safety precaution, only delete folders that match regex
  const regex = /^[a-z]{2}(-[A-Z]{2,4})?$/;

  const contents = fs.readdirSync(path);

  contents.forEach(name => {
    if (regex.test(name)) {
      fs.rmdirSync(`${path}/${name}`, { recursive: true });
    }
  });
};

const pull = async opt => {
  const usingVersion = opt.version !== 'latest';

  console.log(baseUrl);

  let url = usingVersion
    ? `https://cdn.i18nexus.com/versions/${opt.version}/translations.json`
    : `${baseUrl}/project_resources/translations.json`;

  url += `?api_key=${opt.apiKey}`;

  console.log(`Downloading translations to ${opt.path}...`);

  const response = await handleFetch(url);

  if (response.status !== 200) {
    return handleError(
      response,
      usingVersion
        ? 'There was a problem fetching your translations. Please ensure you are using the correct API key and a valid version number.'
        : 'There was a problem fetching your translations. Please try again in a moment.'
    );
  }

  const translations = await response.json();

  if (opt.clean) {
    cleanDirectory(opt.path);
  }

  for (let lng in translations) {
    const lngFilePath = `${opt.path}/${lng}`;
    fs.mkdirSync(lngFilePath, { recursive: true });

    for (let namespace in translations[lng]) {
      fs.writeFileSync(
        `${lngFilePath}/${namespace}.json`,
        JSON.stringify(translations[lng][namespace])
      );
    }
  }

  console.log(colors.green('Translations downloaded successfully.'));
};

module.exports = pull;
