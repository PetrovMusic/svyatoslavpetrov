#!/usr/bin/env node
const pkg = require('../package.json');

const program = require('commander');
const pull = require('../commands/pull');
const addString = require('../commands/addString');
const updateString = require('../commands/updateString');
const deleteString = require('../commands/deleteString');
const importJson = require('../commands/importJson');
const addNamespace = require('../commands/addNamespace');

// Using Next's env variable loader because
// Next supports more than just one .env file
const { loadEnvConfig } = require('@next/env');

if (process.env.I18NEXUS_NO_DOT_ENV !== 'true') {
  loadEnvConfig(process.cwd());
}

program.version(pkg.version);

program
  .command('pull')
  .description('Download all translations as .json files')
  .requiredOption(
    '-k, --api-key <apiKey>',
    'The API key for your project',
    process.env.I18NEXUS_API_KEY
  )
  .requiredOption(
    '-v, --ver <version>',
    'The version of the translations to be downloaded.',
    process.env.I18NEXUS_VERSION || 'latest'
  )
  .requiredOption(
    '-p, --path <path>',
    'The path to the destination folder in which translation files will be downloaded',
    `${process.cwd()}/public/locales`
  )
  .option(
    '--clean',
    'Removes and rebuilds destination folder before download',
    false
  )
  .action(options => {
    pull({
      apiKey: options.apiKey,
      version: options.ver,
      path: options.path,
      clean: options.clean
    });
  });

program
  .command('add-string')
  .alias('a')
  .description('Add a new base string to a namespace')
  .requiredOption(
    '-k, --api-key <apiKey>',
    'The API key for your project',
    process.env.I18NEXUS_API_KEY
  )
  .requiredOption(
    '-t, --pat <personalAccessToken>',
    'A personal access token generated for your account in i18nexus.',
    process.env.I18NEXUS_PERSONAL_ACCESS_TOKEN
  )
  .requiredOption('-K, --key <stringKey>', 'The key of the string to create')
  .requiredOption(
    '-v, --value <stringValue>',
    'The value of the string to create'
  )
  .requiredOption(
    '-ns, --namespace <stringNamespace>',
    'The namespace in which to create the string'
  )
  .option(
    '-d, --details <stringDetails>',
    'The details of the string to create (optional)'
  )
  .action(options => {
    addString({
      key: options.key,
      value: options.value,
      details: options.details,
      namespace: options.namespace,
      apiKey: options.apiKey,
      pat: options.pat
    });
  });

program
  .command('update-string <namespaceOfString> <keyOfString>')
  .alias('u')
  .description('Update a base string through PATCH request')
  .requiredOption(
    '-k, --api-key <apiKey>',
    'The API key for your project',
    process.env.I18NEXUS_API_KEY
  )
  .requiredOption(
    '-t, --pat <personalAccessToken>',
    'A personal access token generated for your account in i18nexus.',
    process.env.I18NEXUS_PERSONAL_ACCESS_TOKEN
  )
  .option('-K, --key <stringKey>', 'The new key of the string')
  .option('-v, --value <stringValue>', 'The new value of the string')
  .option(
    '-ns, --namespace <stringNamespace>',
    'The new namespace of the string'
  )
  .option('-d, --details <stringDetails>', 'The new details of the string')
  .option(
    '--reset-confirmed',
    'Reset confirmed translations of this string with machine translations.'
  )
  .option(
    '--retain-confirmed',
    'Do not reset confirmed translations of this string with machine translations.'
  )
  .action((namespaceOfString, keyOfString, options) => {
    updateString({
      id: {
        namespace: namespaceOfString,
        key: keyOfString
      },
      key: options.key,
      value: options.value,
      details: options.details,
      namespace: options.namespace,
      apiKey: options.apiKey,
      pat: options.pat,
      resetConfirmed: options.resetConfirmed,
      retainConfirmed: options.retainConfirmed
    });
  });

program
  .command('delete-string <namespaceOfString> <keyOfString>')
  .alias('d')
  .description('Delete a base string and its translations')
  .requiredOption(
    '-k, --api-key <apiKey>',
    'The API key for your project',
    process.env.I18NEXUS_API_KEY
  )
  .requiredOption(
    '-t, --pat <personalAccessToken>',
    'A personal access token generated for your account in i18nexus.',
    process.env.I18NEXUS_PERSONAL_ACCESS_TOKEN
  )
  .action((namespaceOfString, keyOfString, options) => {
    deleteString({
      id: {
        namespace: namespaceOfString,
        key: keyOfString
      },
      apiKey: options.apiKey,
      pat: options.pat
    });
  });

program
  .command('import <filePath>')
  .description(
    'Import base strings into your i18nexus project from a local JSON file.'
  )
  .requiredOption(
    '-k, --api-key <apiKey>',
    'The API key for your project',
    process.env.I18NEXUS_API_KEY
  )
  .requiredOption(
    '-t, --pat <personalAccessToken>',
    'A personal access token generated for your account in i18nexus.',
    process.env.I18NEXUS_PERSONAL_ACCESS_TOKEN
  )
  .requiredOption(
    '-ns, --namespace <namespace>',
    'The namespace in which your strings will be imported.'
  )
  .option(
    '--overwrite',
    'If any keys already exist in the target namespace, overwrite the values with the imported values.',
    false
  )
  .action((filePath, options) => {
    importJson({
      apiKey: options.apiKey,
      path: filePath,
      overwrite: options.overwrite,
      namespace: options.namespace,
      pat: options.pat
    });
  });

program
  .command('add-namespace <namespaceTitle>')
  .alias('a-ns')
  .description('Add a new namespace to your project')
  .requiredOption(
    '-k, --api-key <apiKey>',
    'The API key for your project',
    process.env.I18NEXUS_API_KEY
  )
  .requiredOption(
    '-t, --pat <personalAccessToken>',
    'A personal access token generated for your account in i18nexus',
    process.env.I18NEXUS_PERSONAL_ACCESS_TOKEN
  )
  .action((namespaceTitle, options) => {
    addNamespace({
      title: namespaceTitle,
      apiKey: options.apiKey,
      pat: options.pat
    });
  });

program.parse(process.argv);
